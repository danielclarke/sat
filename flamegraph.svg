<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="453.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="17379"><g><title>sat`core::ptr::drop_in_place&lt;sat::solver::Formula&gt; (2 samples, 0.01%)</title><rect x="0.0000%" y="261" width="0.0115%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="271.50"></text></g><g><title>sat`core::ptr::drop_in_place&lt;core::option::Option&lt;sat::slot_map::SlotMap&lt;sat::solver::Clause&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="0.0000%" y="245" width="0.0115%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="255.50"></text></g><g><title>sat`core::ptr::drop_in_place&lt;sat::slot_map::SlotMap&lt;sat::solver::Clause&gt;&gt; (2 samples, 0.01%)</title><rect x="0.0000%" y="229" width="0.0115%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="2"/><text x="0.2500%" y="239.50"></text></g><g><title>sat`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;sat::solver::Clause&gt;&gt; (2 samples, 0.01%)</title><rect x="0.0000%" y="213" width="0.0115%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="2"/><text x="0.2500%" y="223.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="0.0000%" y="197" width="0.0115%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="2"/><text x="0.2500%" y="207.50"></text></g><g><title>sat`core::ptr::drop_in_place&lt;[sat::solver::Clause]&gt; (2 samples, 0.01%)</title><rect x="0.0000%" y="181" width="0.0115%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="2"/><text x="0.2500%" y="191.50"></text></g><g><title>sat`core::ptr::drop_in_place&lt;sat::solver::Clause&gt; (2 samples, 0.01%)</title><rect x="0.0000%" y="165" width="0.0115%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="2"/><text x="0.2500%" y="175.50"></text></g><g><title>sat`core::ptr::drop_in_place&lt;sat::festival_scheduler::Scheduler&gt; (3 samples, 0.02%)</title><rect x="0.0000%" y="277" width="0.0173%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="3"/><text x="0.2500%" y="287.50"></text></g><g><title>sat`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.01%)</title><rect x="0.0345%" y="117" width="0.0115%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="2"/><text x="0.2845%" y="127.50"></text></g><g><title>sat`alloc::alloc::Global::alloc_impl (2 samples, 0.01%)</title><rect x="0.0345%" y="101" width="0.0115%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="2"/><text x="0.2845%" y="111.50"></text></g><g><title>sat`&lt;sat::solver::Formula as core::clone::Clone&gt;::clone (6 samples, 0.03%)</title><rect x="0.0173%" y="261" width="0.0345%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="6"/><text x="0.2673%" y="271.50"></text></g><g><title>sat`&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.03%)</title><rect x="0.0173%" y="245" width="0.0345%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="6"/><text x="0.2673%" y="255.50"></text></g><g><title>sat`&lt;sat::slot_map::SlotMap&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.03%)</title><rect x="0.0173%" y="229" width="0.0345%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="6"/><text x="0.2673%" y="239.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.03%)</title><rect x="0.0173%" y="213" width="0.0345%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="6"/><text x="0.2673%" y="223.50"></text></g><g><title>sat`&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.03%)</title><rect x="0.0173%" y="197" width="0.0345%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="6"/><text x="0.2673%" y="207.50"></text></g><g><title>sat`&lt;sat::solver::Clause as core::clone::Clone&gt;::clone (6 samples, 0.03%)</title><rect x="0.0173%" y="181" width="0.0345%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="6"/><text x="0.2673%" y="191.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.03%)</title><rect x="0.0173%" y="165" width="0.0345%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="6"/><text x="0.2673%" y="175.50"></text></g><g><title>sat`&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.03%)</title><rect x="0.0230%" y="149" width="0.0288%" height="15" fill="rgb(210,31,41)" fg:x="4" fg:w="5"/><text x="0.2730%" y="159.50"></text></g><g><title>sat`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.03%)</title><rect x="0.0230%" y="133" width="0.0288%" height="15" fill="rgb(221,200,47)" fg:x="4" fg:w="5"/><text x="0.2730%" y="143.50"></text></g><g><title>sat`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;sat::slot_map::SlotKey&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="0.0575%" y="245" width="0.0173%" height="15" fill="rgb(226,26,5)" fg:x="10" fg:w="3"/><text x="0.3075%" y="255.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="0.0575%" y="229" width="0.0173%" height="15" fill="rgb(249,33,26)" fg:x="10" fg:w="3"/><text x="0.3075%" y="239.50"></text></g><g><title>sat`core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;sat::slot_map::SlotKey&gt;]&gt; (3 samples, 0.02%)</title><rect x="0.0575%" y="213" width="0.0173%" height="15" fill="rgb(235,183,28)" fg:x="10" fg:w="3"/><text x="0.3075%" y="223.50"></text></g><g><title>sat`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;sat::slot_map::SlotKey&gt;&gt; (3 samples, 0.02%)</title><rect x="0.0575%" y="197" width="0.0173%" height="15" fill="rgb(221,5,38)" fg:x="10" fg:w="3"/><text x="0.3075%" y="207.50"></text></g><g><title>sat`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;sat::slot_map::SlotKey&gt;&gt; (3 samples, 0.02%)</title><rect x="0.0575%" y="181" width="0.0173%" height="15" fill="rgb(247,18,42)" fg:x="10" fg:w="3"/><text x="0.3075%" y="191.50"></text></g><g><title>sat`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="0.0575%" y="165" width="0.0173%" height="15" fill="rgb(241,131,45)" fg:x="10" fg:w="3"/><text x="0.3075%" y="175.50"></text></g><g><title>sat`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.02%)</title><rect x="0.0575%" y="149" width="0.0173%" height="15" fill="rgb(249,31,29)" fg:x="10" fg:w="3"/><text x="0.3075%" y="159.50"></text></g><g><title>sat`core::ptr::drop_in_place&lt;sat::solver::Solver&gt; (7 samples, 0.04%)</title><rect x="0.0575%" y="261" width="0.0403%" height="15" fill="rgb(225,111,53)" fg:x="10" fg:w="7"/><text x="0.3075%" y="271.50"></text></g><g><title>sat`core::ptr::drop_in_place&lt;sat::slot_map::SlotMap&lt;sat::solver::Clause&gt;&gt; (4 samples, 0.02%)</title><rect x="0.0748%" y="245" width="0.0230%" height="15" fill="rgb(238,160,17)" fg:x="13" fg:w="4"/><text x="0.3248%" y="255.50"></text></g><g><title>sat`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;sat::solver::Clause&gt;&gt; (4 samples, 0.02%)</title><rect x="0.0748%" y="229" width="0.0230%" height="15" fill="rgb(214,148,48)" fg:x="13" fg:w="4"/><text x="0.3248%" y="239.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="0.0748%" y="213" width="0.0230%" height="15" fill="rgb(232,36,49)" fg:x="13" fg:w="4"/><text x="0.3248%" y="223.50"></text></g><g><title>sat`core::ptr::drop_in_place&lt;[sat::solver::Clause]&gt; (4 samples, 0.02%)</title><rect x="0.0748%" y="197" width="0.0230%" height="15" fill="rgb(209,103,24)" fg:x="13" fg:w="4"/><text x="0.3248%" y="207.50"></text></g><g><title>sat`core::ptr::drop_in_place&lt;sat::solver::Clause&gt; (4 samples, 0.02%)</title><rect x="0.0748%" y="181" width="0.0230%" height="15" fill="rgb(229,88,8)" fg:x="13" fg:w="4"/><text x="0.3248%" y="191.50"></text></g><g><title>sat`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;sat::solver::Literal&gt;&gt; (4 samples, 0.02%)</title><rect x="0.0748%" y="165" width="0.0230%" height="15" fill="rgb(213,181,19)" fg:x="13" fg:w="4"/><text x="0.3248%" y="175.50"></text></g><g><title>sat`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;sat::solver::Literal&gt;&gt; (3 samples, 0.02%)</title><rect x="0.0806%" y="149" width="0.0173%" height="15" fill="rgb(254,191,54)" fg:x="14" fg:w="3"/><text x="0.3306%" y="159.50"></text></g><g><title>sat`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="0.0806%" y="133" width="0.0173%" height="15" fill="rgb(241,83,37)" fg:x="14" fg:w="3"/><text x="0.3306%" y="143.50"></text></g><g><title>sat`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.02%)</title><rect x="0.0806%" y="117" width="0.0173%" height="15" fill="rgb(233,36,39)" fg:x="14" fg:w="3"/><text x="0.3306%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.01%)</title><rect x="0.0863%" y="101" width="0.0115%" height="15" fill="rgb(226,3,54)" fg:x="15" fg:w="2"/><text x="0.3363%" y="111.50"></text></g><g><title>sat`sat::festival_scheduler::Scheduler::add_artist (4 samples, 0.02%)</title><rect x="0.0978%" y="261" width="0.0230%" height="15" fill="rgb(245,192,40)" fg:x="17" fg:w="4"/><text x="0.3478%" y="271.50"></text></g><g><title>sat`sat::festival_scheduler::Scheduler::add_artist_var (4 samples, 0.02%)</title><rect x="0.0978%" y="245" width="0.0230%" height="15" fill="rgb(238,167,29)" fg:x="17" fg:w="4"/><text x="0.3478%" y="255.50"></text></g><g><title>sat`std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (4 samples, 0.02%)</title><rect x="0.0978%" y="229" width="0.0230%" height="15" fill="rgb(232,182,51)" fg:x="17" fg:w="4"/><text x="0.3478%" y="239.50"></text></g><g><title>sat`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (4 samples, 0.02%)</title><rect x="0.0978%" y="213" width="0.0230%" height="15" fill="rgb(231,60,39)" fg:x="17" fg:w="4"/><text x="0.3478%" y="223.50"></text></g><g><title>sat`hashbrown::raw::RawTable&lt;T,A&gt;::reserve (3 samples, 0.02%)</title><rect x="0.1036%" y="197" width="0.0173%" height="15" fill="rgb(208,69,12)" fg:x="18" fg:w="3"/><text x="0.3536%" y="207.50"></text></g><g><title>sat`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.01%)</title><rect x="0.1093%" y="181" width="0.0115%" height="15" fill="rgb(235,93,37)" fg:x="19" fg:w="2"/><text x="0.3593%" y="191.50"></text></g><g><title>sat`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (2 samples, 0.01%)</title><rect x="0.1093%" y="165" width="0.0115%" height="15" fill="rgb(213,116,39)" fg:x="19" fg:w="2"/><text x="0.3593%" y="175.50"></text></g><g><title>sat`hashbrown::map::make_hasher::_{{closure}} (2 samples, 0.01%)</title><rect x="0.1093%" y="149" width="0.0115%" height="15" fill="rgb(222,207,29)" fg:x="19" fg:w="2"/><text x="0.3593%" y="159.50"></text></g><g><title>sat`core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="0.1093%" y="133" width="0.0115%" height="15" fill="rgb(206,96,30)" fg:x="19" fg:w="2"/><text x="0.3593%" y="143.50"></text></g><g><title>sat`alloc::alloc::exchange_malloc (2 samples, 0.01%)</title><rect x="0.1323%" y="229" width="0.0115%" height="15" fill="rgb(218,138,4)" fg:x="23" fg:w="2"/><text x="0.3823%" y="239.50"></text></g><g><title>sat`alloc::alloc::Global::alloc_impl (2 samples, 0.01%)</title><rect x="0.1323%" y="213" width="0.0115%" height="15" fill="rgb(250,191,14)" fg:x="23" fg:w="2"/><text x="0.3823%" y="223.50"></text></g><g><title>sat`sat::slot_map::SlotMap&lt;T&gt;::insert (4 samples, 0.02%)</title><rect x="0.1496%" y="213" width="0.0230%" height="15" fill="rgb(239,60,40)" fg:x="26" fg:w="4"/><text x="0.3996%" y="223.50"></text></g><g><title>sat`alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.02%)</title><rect x="0.1554%" y="197" width="0.0173%" height="15" fill="rgb(206,27,48)" fg:x="27" fg:w="3"/><text x="0.4054%" y="207.50"></text></g><g><title>sat`alloc::slice::_&lt;impl [T]&gt;::sort (3 samples, 0.02%)</title><rect x="0.1726%" y="197" width="0.0173%" height="15" fill="rgb(225,35,8)" fg:x="30" fg:w="3"/><text x="0.4226%" y="207.50"></text></g><g><title>sat`alloc::slice::stable_sort (3 samples, 0.02%)</title><rect x="0.1726%" y="181" width="0.0173%" height="15" fill="rgb(250,213,24)" fg:x="30" fg:w="3"/><text x="0.4226%" y="191.50"></text></g><g><title>sat`core::slice::sort::merge_sort (3 samples, 0.02%)</title><rect x="0.1726%" y="165" width="0.0173%" height="15" fill="rgb(247,123,22)" fg:x="30" fg:w="3"/><text x="0.4226%" y="175.50"></text></g><g><title>sat`core::slice::sort::insertion_sort_shift_left (2 samples, 0.01%)</title><rect x="0.1784%" y="149" width="0.0115%" height="15" fill="rgb(231,138,38)" fg:x="31" fg:w="2"/><text x="0.4284%" y="159.50"></text></g><g><title>sat`&lt;core::ops::range::RangeInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.01%)</title><rect x="0.1784%" y="133" width="0.0115%" height="15" fill="rgb(231,145,46)" fg:x="31" fg:w="2"/><text x="0.4284%" y="143.50"></text></g><g><title>sat`sat::festival_scheduler::Scheduler::artist_one_place_at_a_time (12 samples, 0.07%)</title><rect x="0.1266%" y="261" width="0.0690%" height="15" fill="rgb(251,118,11)" fg:x="22" fg:w="12"/><text x="0.3766%" y="271.50"></text></g><g><title>sat`sat::festival_scheduler::Scheduler::zero_or_one (11 samples, 0.06%)</title><rect x="0.1323%" y="245" width="0.0633%" height="15" fill="rgb(217,147,25)" fg:x="23" fg:w="11"/><text x="0.3823%" y="255.50"></text></g><g><title>sat`sat::solver::Formula::add_clause (8 samples, 0.05%)</title><rect x="0.1496%" y="229" width="0.0460%" height="15" fill="rgb(247,81,37)" fg:x="26" fg:w="8"/><text x="0.3996%" y="239.50"></text></g><g><title>sat`sat::solver::Clause::new (4 samples, 0.02%)</title><rect x="0.1726%" y="213" width="0.0230%" height="15" fill="rgb(209,12,38)" fg:x="30" fg:w="4"/><text x="0.4226%" y="223.50"></text></g><g><title>sat`sat::festival_scheduler::Scheduler::artists_attend_events (3 samples, 0.02%)</title><rect x="0.1956%" y="261" width="0.0173%" height="15" fill="rgb(227,1,9)" fg:x="34" fg:w="3"/><text x="0.4456%" y="271.50"></text></g><g><title>sat`sat::slot_map::SlotMap&lt;T&gt;::insert (2 samples, 0.01%)</title><rect x="0.2187%" y="213" width="0.0115%" height="15" fill="rgb(248,47,43)" fg:x="38" fg:w="2"/><text x="0.4687%" y="223.50"></text></g><g><title>sat`sat::festival_scheduler::Scheduler::exactly_one (5 samples, 0.03%)</title><rect x="0.2129%" y="245" width="0.0288%" height="15" fill="rgb(221,10,30)" fg:x="37" fg:w="5"/><text x="0.4629%" y="255.50"></text></g><g><title>sat`sat::solver::Formula::add_clause (4 samples, 0.02%)</title><rect x="0.2187%" y="229" width="0.0230%" height="15" fill="rgb(210,229,1)" fg:x="38" fg:w="4"/><text x="0.4687%" y="239.50"></text></g><g><title>sat`sat::solver::Clause::new (2 samples, 0.01%)</title><rect x="0.2302%" y="213" width="0.0115%" height="15" fill="rgb(222,148,37)" fg:x="40" fg:w="2"/><text x="0.4802%" y="223.50"></text></g><g><title>sat`alloc::slice::_&lt;impl [T]&gt;::sort (2 samples, 0.01%)</title><rect x="0.2302%" y="197" width="0.0115%" height="15" fill="rgb(234,67,33)" fg:x="40" fg:w="2"/><text x="0.4802%" y="207.50"></text></g><g><title>sat`alloc::slice::stable_sort (2 samples, 0.01%)</title><rect x="0.2302%" y="181" width="0.0115%" height="15" fill="rgb(247,98,35)" fg:x="40" fg:w="2"/><text x="0.4802%" y="191.50"></text></g><g><title>sat`core::slice::sort::merge_sort (2 samples, 0.01%)</title><rect x="0.2302%" y="165" width="0.0115%" height="15" fill="rgb(247,138,52)" fg:x="40" fg:w="2"/><text x="0.4802%" y="175.50"></text></g><g><title>sat`sat::festival_scheduler::Scheduler::event_must_run (6 samples, 0.03%)</title><rect x="0.2129%" y="261" width="0.0345%" height="15" fill="rgb(213,79,30)" fg:x="37" fg:w="6"/><text x="0.4629%" y="271.50"></text></g><g><title>sat`sat::festival_scheduler::Scheduler::one_event_per_venue_interval (2 samples, 0.01%)</title><rect x="0.2474%" y="261" width="0.0115%" height="15" fill="rgb(246,177,23)" fg:x="43" fg:w="2"/><text x="0.4974%" y="271.50"></text></g><g><title>sat`sat::festival_scheduler::Scheduler::zero_or_one (2 samples, 0.01%)</title><rect x="0.2474%" y="245" width="0.0115%" height="15" fill="rgb(230,62,27)" fg:x="43" fg:w="2"/><text x="0.4974%" y="255.50"></text></g><g><title>sat`&lt;sat::solver::ClauseIterator as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="0.2762%" y="245" width="0.0173%" height="15" fill="rgb(216,154,8)" fg:x="48" fg:w="3"/><text x="0.5262%" y="255.50"></text></g><g><title>sat`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (7 samples, 0.04%)</title><rect x="0.3107%" y="213" width="0.0403%" height="15" fill="rgb(244,35,45)" fg:x="54" fg:w="7"/><text x="0.5607%" y="223.50"></text></g><g><title>sat`alloc::raw_vec::finish_grow (6 samples, 0.03%)</title><rect x="0.3165%" y="197" width="0.0345%" height="15" fill="rgb(251,115,12)" fg:x="55" fg:w="6"/><text x="0.5665%" y="207.50"></text></g><g><title>sat`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (5 samples, 0.03%)</title><rect x="0.3222%" y="181" width="0.0288%" height="15" fill="rgb(240,54,50)" fg:x="56" fg:w="5"/><text x="0.5722%" y="191.50"></text></g><g><title>sat`alloc::alloc::Global::grow_impl (5 samples, 0.03%)</title><rect x="0.3222%" y="165" width="0.0288%" height="15" fill="rgb(233,84,52)" fg:x="56" fg:w="5"/><text x="0.5722%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.02%)</title><rect x="0.3337%" y="149" width="0.0173%" height="15" fill="rgb(207,117,47)" fg:x="58" fg:w="3"/><text x="0.5837%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.02%)</title><rect x="0.3337%" y="133" width="0.0173%" height="15" fill="rgb(249,43,39)" fg:x="58" fg:w="3"/><text x="0.5837%" y="143.50"></text></g><g><title>sat`alloc::vec::Vec&lt;T,A&gt;::push (11 samples, 0.06%)</title><rect x="0.2935%" y="245" width="0.0633%" height="15" fill="rgb(209,38,44)" fg:x="51" fg:w="11"/><text x="0.5435%" y="255.50"></text></g><g><title>sat`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.05%)</title><rect x="0.3107%" y="229" width="0.0460%" height="15" fill="rgb(236,212,23)" fg:x="54" fg:w="8"/><text x="0.5607%" y="239.50"></text></g><g><title>sat`core::iter::traits::iterator::Iterator::collect (5 samples, 0.03%)</title><rect x="0.3568%" y="245" width="0.0288%" height="15" fill="rgb(242,79,21)" fg:x="62" fg:w="5"/><text x="0.6068%" y="255.50"></text></g><g><title>sat`&lt;sat::slot_map::SlotMap&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (5 samples, 0.03%)</title><rect x="0.3568%" y="229" width="0.0288%" height="15" fill="rgb(211,96,35)" fg:x="62" fg:w="5"/><text x="0.6068%" y="239.50"></text></g><g><title>sat`sat::slot_map::SlotMap&lt;T&gt;::insert (4 samples, 0.02%)</title><rect x="0.3625%" y="213" width="0.0230%" height="15" fill="rgb(253,215,40)" fg:x="63" fg:w="4"/><text x="0.6125%" y="223.50"></text></g><g><title>sat`alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.02%)</title><rect x="0.3625%" y="197" width="0.0230%" height="15" fill="rgb(211,81,21)" fg:x="63" fg:w="4"/><text x="0.6125%" y="207.50"></text></g><g><title>sat`sat::solver::Solver::new (24 samples, 0.14%)</title><rect x="0.2589%" y="261" width="0.1381%" height="15" fill="rgb(208,190,38)" fg:x="45" fg:w="24"/><text x="0.5089%" y="271.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (7 samples, 0.04%)</title><rect x="0.4143%" y="245" width="0.0403%" height="15" fill="rgb(235,213,38)" fg:x="72" fg:w="7"/><text x="0.6643%" y="255.50"></text></g><g><title>sat`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.01%)</title><rect x="0.4431%" y="229" width="0.0115%" height="15" fill="rgb(237,122,38)" fg:x="77" fg:w="2"/><text x="0.6931%" y="239.50"></text></g><g><title>sat`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.17%)</title><rect x="0.4546%" y="245" width="0.1726%" height="15" fill="rgb(244,218,35)" fg:x="79" fg:w="30"/><text x="0.7046%" y="255.50"></text></g><g><title>sat`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (370 samples, 2.13%)</title><rect x="0.6272%" y="245" width="2.1290%" height="15" fill="rgb(240,68,47)" fg:x="109" fg:w="370"/><text x="0.8772%" y="255.50">s..</text></g><g><title>sat`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (197 samples, 1.13%)</title><rect x="2.7562%" y="245" width="1.1336%" height="15" fill="rgb(210,16,53)" fg:x="479" fg:w="197"/><text x="3.0062%" y="255.50"></text></g><g><title>sat`&lt;sat::slot_map::SlotMapIterator&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="3.8955%" y="245" width="0.0115%" height="15" fill="rgb(235,124,12)" fg:x="677" fg:w="2"/><text x="4.1455%" y="255.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.01%)</title><rect x="3.8955%" y="229" width="0.0115%" height="15" fill="rgb(224,169,11)" fg:x="677" fg:w="2"/><text x="4.1455%" y="239.50"></text></g><g><title>sat`&lt;sat::solver::ClauseIterator as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="3.9070%" y="245" width="0.0173%" height="15" fill="rgb(250,166,2)" fg:x="679" fg:w="3"/><text x="4.1570%" y="255.50"></text></g><g><title>sat`&lt;sat::solver::Value as core::cmp::PartialEq&gt;::eq (16 samples, 0.09%)</title><rect x="3.9243%" y="245" width="0.0921%" height="15" fill="rgb(242,216,29)" fg:x="682" fg:w="16"/><text x="4.1743%" y="255.50"></text></g><g><title>sat`core::ops::function::FnMut::call_mut (6 samples, 0.03%)</title><rect x="4.0221%" y="197" width="0.0345%" height="15" fill="rgb(230,116,27)" fg:x="699" fg:w="6"/><text x="4.2721%" y="207.50"></text></g><g><title>sat`core::slice::sort::find_streak (5 samples, 0.03%)</title><rect x="4.0566%" y="197" width="0.0288%" height="15" fill="rgb(228,99,48)" fg:x="705" fg:w="5"/><text x="4.3066%" y="207.50"></text></g><g><title>sat`core::slice::sort::merge (18 samples, 0.10%)</title><rect x="4.0854%" y="197" width="0.1036%" height="15" fill="rgb(253,11,6)" fg:x="710" fg:w="18"/><text x="4.3354%" y="207.50"></text></g><g><title>sat`alloc::slice::_&lt;impl [T]&gt;::sort (41 samples, 0.24%)</title><rect x="4.0163%" y="245" width="0.2359%" height="15" fill="rgb(247,143,39)" fg:x="698" fg:w="41"/><text x="4.2663%" y="255.50"></text></g><g><title>sat`alloc::slice::stable_sort (41 samples, 0.24%)</title><rect x="4.0163%" y="229" width="0.2359%" height="15" fill="rgb(236,97,10)" fg:x="698" fg:w="41"/><text x="4.2663%" y="239.50"></text></g><g><title>sat`core::slice::sort::merge_sort (41 samples, 0.24%)</title><rect x="4.0163%" y="213" width="0.2359%" height="15" fill="rgb(233,208,19)" fg:x="698" fg:w="41"/><text x="4.2663%" y="223.50"></text></g><g><title>sat`core::slice::sort::provide_sorted_batch (8 samples, 0.05%)</title><rect x="4.2062%" y="197" width="0.0460%" height="15" fill="rgb(216,164,2)" fg:x="731" fg:w="8"/><text x="4.4562%" y="207.50"></text></g><g><title>sat`core::slice::sort::insertion_sort_shift_left (7 samples, 0.04%)</title><rect x="4.2120%" y="181" width="0.0403%" height="15" fill="rgb(220,129,5)" fg:x="732" fg:w="7"/><text x="4.4620%" y="191.50"></text></g><g><title>sat`core::slice::sort::insert_tail (5 samples, 0.03%)</title><rect x="4.2235%" y="165" width="0.0288%" height="15" fill="rgb(242,17,10)" fg:x="734" fg:w="5"/><text x="4.4735%" y="175.50"></text></g><g><title>sat`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (2 samples, 0.01%)</title><rect x="4.2408%" y="149" width="0.0115%" height="15" fill="rgb(242,107,0)" fg:x="737" fg:w="2"/><text x="4.4908%" y="159.50"></text></g><g><title>sat`alloc::vec::Vec&lt;T,A&gt;::dedup (5 samples, 0.03%)</title><rect x="4.2523%" y="245" width="0.0288%" height="15" fill="rgb(251,28,31)" fg:x="739" fg:w="5"/><text x="4.5023%" y="255.50"></text></g><g><title>sat`alloc::vec::Vec&lt;T,A&gt;::dedup_by (5 samples, 0.03%)</title><rect x="4.2523%" y="229" width="0.0288%" height="15" fill="rgb(233,223,10)" fg:x="739" fg:w="5"/><text x="4.5023%" y="239.50"></text></g><g><title>sat`alloc::vec::Vec&lt;T,A&gt;::dedup::_{{closure}} (2 samples, 0.01%)</title><rect x="4.2695%" y="213" width="0.0115%" height="15" fill="rgb(215,21,27)" fg:x="742" fg:w="2"/><text x="4.5195%" y="223.50"></text></g><g><title>sat`core::cmp::impls::_&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (615 samples, 3.54%)</title><rect x="4.2810%" y="245" width="3.5388%" height="15" fill="rgb(232,23,21)" fg:x="744" fg:w="615"/><text x="4.5310%" y="255.50">sat..</text></g><g><title>sat`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find_map (12 samples, 0.07%)</title><rect x="7.8543%" y="133" width="0.0690%" height="15" fill="rgb(244,5,23)" fg:x="1365" fg:w="12"/><text x="8.1043%" y="143.50"></text></g><g><title>sat`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (7 samples, 0.04%)</title><rect x="7.8831%" y="117" width="0.0403%" height="15" fill="rgb(226,81,46)" fg:x="1370" fg:w="7"/><text x="8.1331%" y="127.50"></text></g><g><title>sat`sat::solver::Solver::solve::_{{closure}} (6 samples, 0.03%)</title><rect x="7.8888%" y="101" width="0.0345%" height="15" fill="rgb(247,70,30)" fg:x="1371" fg:w="6"/><text x="8.1388%" y="111.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5 samples, 0.03%)</title><rect x="7.8946%" y="85" width="0.0288%" height="15" fill="rgb(212,68,19)" fg:x="1372" fg:w="5"/><text x="8.1446%" y="95.50"></text></g><g><title>sat`&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.09%)</title><rect x="7.8486%" y="149" width="0.0921%" height="15" fill="rgb(240,187,13)" fg:x="1364" fg:w="16"/><text x="8.0986%" y="159.50"></text></g><g><title>sat`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="7.9234%" y="133" width="0.0173%" height="15" fill="rgb(223,113,26)" fg:x="1377" fg:w="3"/><text x="8.1734%" y="143.50"></text></g><g><title>sat`alloc::raw_vec::finish_grow (5 samples, 0.03%)</title><rect x="7.9521%" y="101" width="0.0288%" height="15" fill="rgb(206,192,2)" fg:x="1382" fg:w="5"/><text x="8.2021%" y="111.50"></text></g><g><title>sat`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4 samples, 0.02%)</title><rect x="7.9579%" y="85" width="0.0230%" height="15" fill="rgb(241,108,4)" fg:x="1383" fg:w="4"/><text x="8.2079%" y="95.50"></text></g><g><title>sat`alloc::alloc::Global::grow_impl (4 samples, 0.02%)</title><rect x="7.9579%" y="69" width="0.0230%" height="15" fill="rgb(247,173,49)" fg:x="1383" fg:w="4"/><text x="8.2079%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 0.02%)</title><rect x="7.9579%" y="53" width="0.0230%" height="15" fill="rgb(224,114,35)" fg:x="1383" fg:w="4"/><text x="8.2079%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.02%)</title><rect x="7.9636%" y="37" width="0.0173%" height="15" fill="rgb(245,159,27)" fg:x="1384" fg:w="3"/><text x="8.2136%" y="47.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (29 samples, 0.17%)</title><rect x="7.8198%" y="181" width="0.1669%" height="15" fill="rgb(245,172,44)" fg:x="1359" fg:w="29"/><text x="8.0698%" y="191.50"></text></g><g><title>sat`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (29 samples, 0.17%)</title><rect x="7.8198%" y="165" width="0.1669%" height="15" fill="rgb(236,23,11)" fg:x="1359" fg:w="29"/><text x="8.0698%" y="175.50"></text></g><g><title>sat`alloc::vec::Vec&lt;T,A&gt;::reserve (7 samples, 0.04%)</title><rect x="7.9464%" y="149" width="0.0403%" height="15" fill="rgb(205,117,38)" fg:x="1381" fg:w="7"/><text x="8.1964%" y="159.50"></text></g><g><title>sat`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.04%)</title><rect x="7.9464%" y="133" width="0.0403%" height="15" fill="rgb(237,72,25)" fg:x="1381" fg:w="7"/><text x="8.1964%" y="143.50"></text></g><g><title>sat`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (6 samples, 0.03%)</title><rect x="7.9521%" y="117" width="0.0345%" height="15" fill="rgb(244,70,9)" fg:x="1382" fg:w="6"/><text x="8.2021%" y="127.50"></text></g><g><title>sat`core::iter::traits::iterator::Iterator::collect (30 samples, 0.17%)</title><rect x="7.8198%" y="245" width="0.1726%" height="15" fill="rgb(217,125,39)" fg:x="1359" fg:w="30"/><text x="8.0698%" y="255.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (30 samples, 0.17%)</title><rect x="7.8198%" y="229" width="0.1726%" height="15" fill="rgb(235,36,10)" fg:x="1359" fg:w="30"/><text x="8.0698%" y="239.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (30 samples, 0.17%)</title><rect x="7.8198%" y="213" width="0.1726%" height="15" fill="rgb(251,123,47)" fg:x="1359" fg:w="30"/><text x="8.0698%" y="223.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (30 samples, 0.17%)</title><rect x="7.8198%" y="197" width="0.1726%" height="15" fill="rgb(221,13,13)" fg:x="1359" fg:w="30"/><text x="8.0698%" y="207.50"></text></g><g><title>sat`core::option::Option&lt;T&gt;::is_none (10 samples, 0.06%)</title><rect x="7.9924%" y="245" width="0.0575%" height="15" fill="rgb(238,131,9)" fg:x="1389" fg:w="10"/><text x="8.2424%" y="255.50"></text></g><g><title>sat`sat::fixed_size_stack::FixedSizeStack&lt;T&gt;::push (7 samples, 0.04%)</title><rect x="8.0557%" y="245" width="0.0403%" height="15" fill="rgb(211,50,8)" fg:x="1400" fg:w="7"/><text x="8.3057%" y="255.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (6 samples, 0.03%)</title><rect x="8.0615%" y="229" width="0.0345%" height="15" fill="rgb(245,182,24)" fg:x="1401" fg:w="6"/><text x="8.3115%" y="239.50"></text></g><g><title>sat`sat::slot_map::SlotMap&lt;T&gt;::get (14 samples, 0.08%)</title><rect x="8.0960%" y="245" width="0.0806%" height="15" fill="rgb(242,14,37)" fg:x="1407" fg:w="14"/><text x="8.3460%" y="255.50"></text></g><g><title>sat`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.03%)</title><rect x="8.1823%" y="197" width="0.0288%" height="15" fill="rgb(246,228,12)" fg:x="1422" fg:w="5"/><text x="8.4323%" y="207.50"></text></g><g><title>sat`sat::slot_map::SlotMap&lt;T&gt;::len (6 samples, 0.03%)</title><rect x="8.1823%" y="245" width="0.0345%" height="15" fill="rgb(213,55,15)" fg:x="1422" fg:w="6"/><text x="8.4323%" y="255.50"></text></g><g><title>sat`&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (6 samples, 0.03%)</title><rect x="8.1823%" y="229" width="0.0345%" height="15" fill="rgb(209,9,3)" fg:x="1422" fg:w="6"/><text x="8.4323%" y="239.50"></text></g><g><title>sat`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.03%)</title><rect x="8.1823%" y="213" width="0.0345%" height="15" fill="rgb(230,59,30)" fg:x="1422" fg:w="6"/><text x="8.4323%" y="223.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (23 samples, 0.13%)</title><rect x="14.5290%" y="229" width="0.1323%" height="15" fill="rgb(209,121,21)" fg:x="2525" fg:w="23"/><text x="14.7790%" y="239.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4,113 samples, 23.67%)</title><rect x="27.7519%" y="213" width="23.6665%" height="15" fill="rgb(220,109,13)" fg:x="4823" fg:w="4113"/><text x="28.0019%" y="223.50">sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops..</text></g><g><title>sat`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,074 samples, 6.18%)</title><rect x="45.2385%" y="197" width="6.1799%" height="15" fill="rgb(232,18,1)" fg:x="7862" fg:w="1074"/><text x="45.4885%" y="207.50">sat`&lt;usi..</text></g><g><title>sat`&lt;sat::fixed_size_stack::StackIterator&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,482 samples, 43.05%)</title><rect x="14.6614%" y="229" width="43.0520%" height="15" fill="rgb(215,41,42)" fg:x="2548" fg:w="7482"/><text x="14.9114%" y="239.50">sat`&lt;sat::fixed_size_stack::StackIterator&lt;T&gt; as core::iter::traits::it..</text></g><g><title>sat`core::option::Option&lt;T&gt;::unwrap (1,094 samples, 6.29%)</title><rect x="51.4184%" y="213" width="6.2950%" height="15" fill="rgb(224,123,36)" fg:x="8936" fg:w="1094"/><text x="51.6684%" y="223.50">sat`core..</text></g><g><title>sat`sat::solver::Solver::assert_invariances (9,315 samples, 53.60%)</title><rect x="8.2168%" y="245" width="53.5992%" height="15" fill="rgb(240,125,3)" fg:x="1428" fg:w="9315"/><text x="8.4668%" y="255.50">sat`sat::solver::Solver::assert_invariances</text></g><g><title>sat`core::option::Option&lt;T&gt;::as_ref (713 samples, 4.10%)</title><rect x="57.7133%" y="229" width="4.1027%" height="15" fill="rgb(205,98,50)" fg:x="10030" fg:w="713"/><text x="57.9633%" y="239.50">sat`..</text></g><g><title>sat`core::option::Option&lt;T&gt;::map_or (2 samples, 0.01%)</title><rect x="61.8448%" y="213" width="0.0115%" height="15" fill="rgb(205,185,37)" fg:x="10748" fg:w="2"/><text x="62.0948%" y="223.50"></text></g><g><title>sat`sat::solver::Solver::backtrack (15 samples, 0.09%)</title><rect x="61.8160%" y="245" width="0.0863%" height="15" fill="rgb(238,207,15)" fg:x="10743" fg:w="15"/><text x="62.0660%" y="255.50"></text></g><g><title>sat`sat::solver::Solver::backtrack_once (11 samples, 0.06%)</title><rect x="61.8390%" y="229" width="0.0633%" height="15" fill="rgb(213,199,42)" fg:x="10747" fg:w="11"/><text x="62.0890%" y="239.50"></text></g><g><title>sat`sat::fixed_size_stack::FixedSizeStack&lt;T&gt;::pop (7 samples, 0.04%)</title><rect x="61.8620%" y="213" width="0.0403%" height="15" fill="rgb(235,201,11)" fg:x="10751" fg:w="7"/><text x="62.1120%" y="223.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3 samples, 0.02%)</title><rect x="61.8850%" y="197" width="0.0173%" height="15" fill="rgb(207,46,11)" fg:x="10755" fg:w="3"/><text x="62.1350%" y="207.50"></text></g><g><title>sat`&lt;sat::slot_map::SlotMapIterator&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="61.9023%" y="197" width="0.0115%" height="15" fill="rgb(241,35,35)" fg:x="10758" fg:w="2"/><text x="62.1523%" y="207.50"></text></g><g><title>sat`sat::solver::Solver::check_satisfiability (4 samples, 0.02%)</title><rect x="61.9023%" y="245" width="0.0230%" height="15" fill="rgb(243,32,47)" fg:x="10758" fg:w="4"/><text x="62.1523%" y="255.50"></text></g><g><title>sat`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.02%)</title><rect x="61.9023%" y="229" width="0.0230%" height="15" fill="rgb(247,202,23)" fg:x="10758" fg:w="4"/><text x="62.1523%" y="239.50"></text></g><g><title>sat`core::iter::traits::iterator::Iterator::fold (4 samples, 0.02%)</title><rect x="61.9023%" y="213" width="0.0230%" height="15" fill="rgb(219,102,11)" fg:x="10758" fg:w="4"/><text x="62.1523%" y="223.50"></text></g><g><title>sat`core::iter::adapters::map::map_fold::_{{closure}} (2 samples, 0.01%)</title><rect x="61.9138%" y="197" width="0.0115%" height="15" fill="rgb(243,110,44)" fg:x="10760" fg:w="2"/><text x="62.1638%" y="207.50"></text></g><g><title>sat`sat::solver::Solver::check_satisfiability::_{{closure}} (2 samples, 0.01%)</title><rect x="61.9138%" y="181" width="0.0115%" height="15" fill="rgb(222,74,54)" fg:x="10760" fg:w="2"/><text x="62.1638%" y="191.50"></text></g><g><title>sat`sat::solver::Solver::eval_clause (2 samples, 0.01%)</title><rect x="61.9138%" y="165" width="0.0115%" height="15" fill="rgb(216,99,12)" fg:x="10760" fg:w="2"/><text x="62.1638%" y="175.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.01%)</title><rect x="61.9138%" y="149" width="0.0115%" height="15" fill="rgb(226,22,26)" fg:x="10760" fg:w="2"/><text x="62.1638%" y="159.50"></text></g><g><title>sat`sat::solver::Solver::clause_length (3 samples, 0.02%)</title><rect x="61.9253%" y="245" width="0.0173%" height="15" fill="rgb(217,163,10)" fg:x="10762" fg:w="3"/><text x="62.1753%" y="255.50"></text></g><g><title>sat`core::option::Option&lt;T&gt;::is_none (3 samples, 0.02%)</title><rect x="62.1842%" y="229" width="0.0173%" height="15" fill="rgb(213,25,53)" fg:x="10807" fg:w="3"/><text x="62.4342%" y="239.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (39 samples, 0.22%)</title><rect x="62.3396%" y="213" width="0.2244%" height="15" fill="rgb(252,105,26)" fg:x="10834" fg:w="39"/><text x="62.5896%" y="223.50"></text></g><g><title>sat`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (13 samples, 0.07%)</title><rect x="62.4892%" y="197" width="0.0748%" height="15" fill="rgb(220,39,43)" fg:x="10860" fg:w="13"/><text x="62.7392%" y="207.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (12 samples, 0.07%)</title><rect x="62.5640%" y="213" width="0.0690%" height="15" fill="rgb(229,68,48)" fg:x="10873" fg:w="12"/><text x="62.8140%" y="223.50"></text></g><g><title>sat`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (3 samples, 0.02%)</title><rect x="62.6158%" y="197" width="0.0173%" height="15" fill="rgb(252,8,32)" fg:x="10882" fg:w="3"/><text x="62.8658%" y="207.50"></text></g><g><title>sat`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (492 samples, 2.83%)</title><rect x="62.6446%" y="181" width="2.8310%" height="15" fill="rgb(223,20,43)" fg:x="10887" fg:w="492"/><text x="62.8946%" y="191.50">sa..</text></g><g><title>sat`core::iter::adapters::map::map_fold::_{{closure}} (8 samples, 0.05%)</title><rect x="65.4756%" y="181" width="0.0460%" height="15" fill="rgb(229,81,49)" fg:x="11379" fg:w="8"/><text x="65.7256%" y="191.50"></text></g><g><title>sat`&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::_{{closure}} (13 samples, 0.07%)</title><rect x="66.4768%" y="165" width="0.0748%" height="15" fill="rgb(236,28,36)" fg:x="11553" fg:w="13"/><text x="66.7268%" y="175.50"></text></g><g><title>sat`&lt;T as core::option::SpecOptionPartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="69.0316%" y="117" width="0.0115%" height="15" fill="rgb(249,185,26)" fg:x="11997" fg:w="2"/><text x="69.2816%" y="127.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (237 samples, 1.36%)</title><rect x="69.0431%" y="117" width="1.3637%" height="15" fill="rgb(249,174,33)" fg:x="11999" fg:w="237"/><text x="69.2931%" y="127.50"></text></g><g><title>sat`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (74 samples, 0.43%)</title><rect x="69.9810%" y="101" width="0.4258%" height="15" fill="rgb(233,201,37)" fg:x="12162" fg:w="74"/><text x="70.2310%" y="111.50"></text></g><g><title>sat`&lt;T as core::option::SpecOptionPartialEq&gt;::eq (125 samples, 0.72%)</title><rect x="70.6370%" y="101" width="0.7193%" height="15" fill="rgb(221,78,26)" fg:x="12276" fg:w="125"/><text x="70.8870%" y="111.50"></text></g><g><title>sat`&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::_{{closure}} (641 samples, 3.69%)</title><rect x="67.8405%" y="149" width="3.6884%" height="15" fill="rgb(250,127,30)" fg:x="11790" fg:w="641"/><text x="68.0905%" y="159.50">sat`..</text></g><g><title>sat`sat::solver::Solver::conflict_analysis_first_uip::_{{closure}} (516 samples, 2.97%)</title><rect x="68.5598%" y="133" width="2.9691%" height="15" fill="rgb(230,49,44)" fg:x="11915" fg:w="516"/><text x="68.8098%" y="143.50">sat..</text></g><g><title>sat`&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (195 samples, 1.12%)</title><rect x="70.4068%" y="117" width="1.1220%" height="15" fill="rgb(229,67,23)" fg:x="12236" fg:w="195"/><text x="70.6568%" y="127.50"></text></g><g><title>sat`core::cmp::impls::_&lt;impl core::cmp::PartialEq for usize&gt;::eq (30 samples, 0.17%)</title><rect x="71.3562%" y="101" width="0.1726%" height="15" fill="rgb(249,83,47)" fg:x="12401" fg:w="30"/><text x="71.6062%" y="111.50"></text></g><g><title>sat`&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (100 samples, 0.58%)</title><rect x="71.5289%" y="149" width="0.5754%" height="15" fill="rgb(215,43,3)" fg:x="12431" fg:w="100"/><text x="71.7789%" y="159.50"></text></g><g><title>sat`&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (1,672 samples, 9.62%)</title><rect x="62.6331%" y="213" width="9.6208%" height="15" fill="rgb(238,154,13)" fg:x="10885" fg:w="1672"/><text x="62.8831%" y="223.50">sat`&lt;core::ite..</text></g><g><title>sat`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,672 samples, 9.62%)</title><rect x="62.6331%" y="197" width="9.6208%" height="15" fill="rgb(219,56,2)" fg:x="10885" fg:w="1672"/><text x="62.8831%" y="207.50">sat`&lt;core::ite..</text></g><g><title>sat`core::iter::traits::iterator::Iterator::fold (1,170 samples, 6.73%)</title><rect x="65.5216%" y="181" width="6.7323%" height="15" fill="rgb(233,0,4)" fg:x="11387" fg:w="1170"/><text x="65.7716%" y="191.50">sat`core:..</text></g><g><title>sat`core::iter::adapters::map::map_fold::_{{closure}} (991 samples, 5.70%)</title><rect x="66.5516%" y="165" width="5.7023%" height="15" fill="rgb(235,30,7)" fg:x="11566" fg:w="991"/><text x="66.8016%" y="175.50">sat`cor..</text></g><g><title>sat`sat::solver::Solver::conflict_analysis_first_uip::_{{closure}} (26 samples, 0.15%)</title><rect x="72.1043%" y="149" width="0.1496%" height="15" fill="rgb(250,79,13)" fg:x="12531" fg:w="26"/><text x="72.3543%" y="159.50"></text></g><g><title>sat`&lt;sat::solver::ClauseIterator as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.13%)</title><rect x="72.2539%" y="213" width="0.1323%" height="15" fill="rgb(211,146,34)" fg:x="12557" fg:w="23"/><text x="72.5039%" y="223.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (14 samples, 0.08%)</title><rect x="72.3057%" y="197" width="0.0806%" height="15" fill="rgb(228,22,38)" fg:x="12566" fg:w="14"/><text x="72.5557%" y="207.50"></text></g><g><title>sat`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.02%)</title><rect x="72.3632%" y="181" width="0.0230%" height="15" fill="rgb(235,168,5)" fg:x="12576" fg:w="4"/><text x="72.6132%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.01%)</title><rect x="72.4265%" y="85" width="0.0115%" height="15" fill="rgb(221,155,16)" fg:x="12587" fg:w="2"/><text x="72.6765%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (5 samples, 0.03%)</title><rect x="72.4150%" y="101" width="0.0288%" height="15" fill="rgb(215,215,53)" fg:x="12585" fg:w="5"/><text x="72.6650%" y="111.50"></text></g><g><title>sat`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (10 samples, 0.06%)</title><rect x="72.4035%" y="181" width="0.0575%" height="15" fill="rgb(223,4,10)" fg:x="12583" fg:w="10"/><text x="72.6535%" y="191.50"></text></g><g><title>sat`alloc::raw_vec::finish_grow (9 samples, 0.05%)</title><rect x="72.4092%" y="165" width="0.0518%" height="15" fill="rgb(234,103,6)" fg:x="12584" fg:w="9"/><text x="72.6592%" y="175.50"></text></g><g><title>sat`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (9 samples, 0.05%)</title><rect x="72.4092%" y="149" width="0.0518%" height="15" fill="rgb(227,97,0)" fg:x="12584" fg:w="9"/><text x="72.6592%" y="159.50"></text></g><g><title>sat`alloc::alloc::Global::grow_impl (9 samples, 0.05%)</title><rect x="72.4092%" y="133" width="0.0518%" height="15" fill="rgb(234,150,53)" fg:x="12584" fg:w="9"/><text x="72.6592%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8 samples, 0.05%)</title><rect x="72.4150%" y="117" width="0.0460%" height="15" fill="rgb(228,201,54)" fg:x="12585" fg:w="8"/><text x="72.6650%" y="127.50"></text></g><g><title>sat`alloc::vec::Vec&lt;T,A&gt;::push (15 samples, 0.09%)</title><rect x="72.3862%" y="213" width="0.0863%" height="15" fill="rgb(222,22,37)" fg:x="12580" fg:w="15"/><text x="72.6362%" y="223.50"></text></g><g><title>sat`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (12 samples, 0.07%)</title><rect x="72.4035%" y="197" width="0.0690%" height="15" fill="rgb(237,53,32)" fg:x="12583" fg:w="12"/><text x="72.6535%" y="207.50"></text></g><g><title>sat`alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (2 samples, 0.01%)</title><rect x="72.4610%" y="181" width="0.0115%" height="15" fill="rgb(233,25,53)" fg:x="12593" fg:w="2"/><text x="72.7110%" y="191.50"></text></g><g><title>sat`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}} (21 samples, 0.12%)</title><rect x="72.8235%" y="165" width="0.1208%" height="15" fill="rgb(210,40,34)" fg:x="12656" fg:w="21"/><text x="73.0735%" y="175.50"></text></g><g><title>sat`alloc::vec::Vec&lt;T,A&gt;::retain (105 samples, 0.60%)</title><rect x="72.4725%" y="213" width="0.6042%" height="15" fill="rgb(241,220,44)" fg:x="12595" fg:w="105"/><text x="72.7225%" y="223.50"></text></g><g><title>sat`alloc::vec::Vec&lt;T,A&gt;::retain_mut (105 samples, 0.60%)</title><rect x="72.4725%" y="197" width="0.6042%" height="15" fill="rgb(235,28,35)" fg:x="12595" fg:w="105"/><text x="72.7225%" y="207.50"></text></g><g><title>sat`alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (104 samples, 0.60%)</title><rect x="72.4783%" y="181" width="0.5984%" height="15" fill="rgb(210,56,17)" fg:x="12596" fg:w="104"/><text x="72.7283%" y="191.50"></text></g><g><title>sat`sat::solver::Solver::conflict_analysis_first_uip::_{{closure}} (23 samples, 0.13%)</title><rect x="72.9444%" y="165" width="0.1323%" height="15" fill="rgb(224,130,29)" fg:x="12677" fg:w="23"/><text x="73.1944%" y="175.50"></text></g><g><title>sat`alloc::vec::from_elem (4 samples, 0.02%)</title><rect x="73.0767%" y="213" width="0.0230%" height="15" fill="rgb(235,212,8)" fg:x="12700" fg:w="4"/><text x="73.3267%" y="223.50"></text></g><g><title>sat`&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (4 samples, 0.02%)</title><rect x="73.0767%" y="197" width="0.0230%" height="15" fill="rgb(223,33,50)" fg:x="12700" fg:w="4"/><text x="73.3267%" y="207.50"></text></g><g><title>sat`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.02%)</title><rect x="73.0767%" y="181" width="0.0230%" height="15" fill="rgb(219,149,13)" fg:x="12700" fg:w="4"/><text x="73.3267%" y="191.50"></text></g><g><title>sat`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (4 samples, 0.02%)</title><rect x="73.0767%" y="165" width="0.0230%" height="15" fill="rgb(250,156,29)" fg:x="12700" fg:w="4"/><text x="73.3267%" y="175.50"></text></g><g><title>sat`alloc::alloc::Global::alloc_impl (4 samples, 0.02%)</title><rect x="73.0767%" y="149" width="0.0230%" height="15" fill="rgb(216,193,19)" fg:x="12700" fg:w="4"/><text x="73.3267%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (4 samples, 0.02%)</title><rect x="73.0767%" y="133" width="0.0230%" height="15" fill="rgb(216,135,14)" fg:x="12700" fg:w="4"/><text x="73.3267%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.02%)</title><rect x="73.0767%" y="117" width="0.0230%" height="15" fill="rgb(241,47,5)" fg:x="12700" fg:w="4"/><text x="73.3267%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.02%)</title><rect x="73.0825%" y="101" width="0.0173%" height="15" fill="rgb(233,42,35)" fg:x="12701" fg:w="3"/><text x="73.3325%" y="111.50"></text></g><g><title>sat`&lt;T as core::option::SpecOptionPartialEq&gt;::eq (3 samples, 0.02%)</title><rect x="73.0997%" y="181" width="0.0173%" height="15" fill="rgb(231,13,6)" fg:x="12704" fg:w="3"/><text x="73.3497%" y="191.50"></text></g><g><title>sat`core::cmp::PartialEq::ne (5 samples, 0.03%)</title><rect x="73.0997%" y="213" width="0.0288%" height="15" fill="rgb(207,181,40)" fg:x="12704" fg:w="5"/><text x="73.3497%" y="223.50"></text></g><g><title>sat`&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.03%)</title><rect x="73.0997%" y="197" width="0.0288%" height="15" fill="rgb(254,173,49)" fg:x="12704" fg:w="5"/><text x="73.3497%" y="207.50"></text></g><g><title>sat`core::cmp::impls::_&lt;impl core::cmp::PartialEq for usize&gt;::eq (2 samples, 0.01%)</title><rect x="73.1170%" y="181" width="0.0115%" height="15" fill="rgb(221,1,38)" fg:x="12707" fg:w="2"/><text x="73.3670%" y="191.50"></text></g><g><title>sat`&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="73.1458%" y="117" width="0.0115%" height="15" fill="rgb(206,124,46)" fg:x="12712" fg:w="2"/><text x="73.3958%" y="127.50"></text></g><g><title>sat`&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="73.1458%" y="101" width="0.0115%" height="15" fill="rgb(249,21,11)" fg:x="12712" fg:w="2"/><text x="73.3958%" y="111.50"></text></g><g><title>sat`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="73.1458%" y="85" width="0.0115%" height="15" fill="rgb(222,201,40)" fg:x="12712" fg:w="2"/><text x="73.3958%" y="95.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (7 samples, 0.04%)</title><rect x="73.1342%" y="149" width="0.0403%" height="15" fill="rgb(235,61,29)" fg:x="12710" fg:w="7"/><text x="73.3842%" y="159.50"></text></g><g><title>sat`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (7 samples, 0.04%)</title><rect x="73.1342%" y="133" width="0.0403%" height="15" fill="rgb(219,207,3)" fg:x="12710" fg:w="7"/><text x="73.3842%" y="143.50"></text></g><g><title>sat`alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.02%)</title><rect x="73.1573%" y="117" width="0.0173%" height="15" fill="rgb(222,56,46)" fg:x="12714" fg:w="3"/><text x="73.4073%" y="127.50"></text></g><g><title>sat`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.01%)</title><rect x="73.1630%" y="101" width="0.0115%" height="15" fill="rgb(239,76,54)" fg:x="12715" fg:w="2"/><text x="73.4130%" y="111.50"></text></g><g><title>sat`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.01%)</title><rect x="73.1630%" y="85" width="0.0115%" height="15" fill="rgb(231,124,27)" fg:x="12715" fg:w="2"/><text x="73.4130%" y="95.50"></text></g><g><title>sat`core::iter::traits::iterator::Iterator::collect (9 samples, 0.05%)</title><rect x="73.1285%" y="213" width="0.0518%" height="15" fill="rgb(249,195,6)" fg:x="12709" fg:w="9"/><text x="73.3785%" y="223.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (8 samples, 0.05%)</title><rect x="73.1342%" y="197" width="0.0460%" height="15" fill="rgb(237,174,47)" fg:x="12710" fg:w="8"/><text x="73.3842%" y="207.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.05%)</title><rect x="73.1342%" y="181" width="0.0460%" height="15" fill="rgb(206,201,31)" fg:x="12710" fg:w="8"/><text x="73.3842%" y="191.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (8 samples, 0.05%)</title><rect x="73.1342%" y="165" width="0.0460%" height="15" fill="rgb(231,57,52)" fg:x="12710" fg:w="8"/><text x="73.3842%" y="175.50"></text></g><g><title>sat`core::slice::iter::Iter&lt;T&gt;::new (4 samples, 0.02%)</title><rect x="73.1860%" y="213" width="0.0230%" height="15" fill="rgb(248,177,22)" fg:x="12719" fg:w="4"/><text x="73.4360%" y="223.50"></text></g><g><title>sat`&lt;sat::solver::Literal as core::cmp::PartialOrd&gt;::partial_cmp (4 samples, 0.02%)</title><rect x="73.2838%" y="101" width="0.0230%" height="15" fill="rgb(215,211,37)" fg:x="12736" fg:w="4"/><text x="73.5338%" y="111.50"></text></g><g><title>sat`core::cmp::impls::_&lt;impl core::cmp::PartialOrd for bool&gt;::partial_cmp (4 samples, 0.02%)</title><rect x="73.3069%" y="101" width="0.0230%" height="15" fill="rgb(241,128,51)" fg:x="12740" fg:w="4"/><text x="73.5569%" y="111.50"></text></g><g><title>sat`core::slice::sort::find_streak (21 samples, 0.12%)</title><rect x="73.2206%" y="149" width="0.1208%" height="15" fill="rgb(227,165,31)" fg:x="12725" fg:w="21"/><text x="73.4706%" y="159.50"></text></g><g><title>sat`core::ops::function::FnMut::call_mut (13 samples, 0.07%)</title><rect x="73.2666%" y="133" width="0.0748%" height="15" fill="rgb(228,167,24)" fg:x="12733" fg:w="13"/><text x="73.5166%" y="143.50"></text></g><g><title>sat`core::cmp::PartialOrd::lt (11 samples, 0.06%)</title><rect x="73.2781%" y="117" width="0.0633%" height="15" fill="rgb(228,143,12)" fg:x="12735" fg:w="11"/><text x="73.5281%" y="127.50"></text></g><g><title>sat`core::cmp::impls::_&lt;impl core::cmp::PartialOrd for usize&gt;::partial_cmp (2 samples, 0.01%)</title><rect x="73.3299%" y="101" width="0.0115%" height="15" fill="rgb(249,149,8)" fg:x="12744" fg:w="2"/><text x="73.5799%" y="111.50"></text></g><g><title>sat`&lt;sat::solver::Literal as core::cmp::PartialOrd&gt;::partial_cmp (3 samples, 0.02%)</title><rect x="73.3587%" y="101" width="0.0173%" height="15" fill="rgb(243,35,44)" fg:x="12749" fg:w="3"/><text x="73.6087%" y="111.50"></text></g><g><title>sat`core::slice::sort::merge (7 samples, 0.04%)</title><rect x="73.3414%" y="149" width="0.0403%" height="15" fill="rgb(246,89,9)" fg:x="12746" fg:w="7"/><text x="73.5914%" y="159.50"></text></g><g><title>sat`core::ops::function::FnMut::call_mut (6 samples, 0.03%)</title><rect x="73.3471%" y="133" width="0.0345%" height="15" fill="rgb(233,213,13)" fg:x="12747" fg:w="6"/><text x="73.5971%" y="143.50"></text></g><g><title>sat`core::cmp::PartialOrd::lt (5 samples, 0.03%)</title><rect x="73.3529%" y="117" width="0.0288%" height="15" fill="rgb(233,141,41)" fg:x="12748" fg:w="5"/><text x="73.6029%" y="127.50"></text></g><g><title>sat`alloc::slice::_&lt;impl [T]&gt;::sort (33 samples, 0.19%)</title><rect x="73.2090%" y="197" width="0.1899%" height="15" fill="rgb(239,167,4)" fg:x="12723" fg:w="33"/><text x="73.4590%" y="207.50"></text></g><g><title>sat`alloc::slice::stable_sort (33 samples, 0.19%)</title><rect x="73.2090%" y="181" width="0.1899%" height="15" fill="rgb(209,217,16)" fg:x="12723" fg:w="33"/><text x="73.4590%" y="191.50"></text></g><g><title>sat`core::slice::sort::merge_sort (33 samples, 0.19%)</title><rect x="73.2090%" y="165" width="0.1899%" height="15" fill="rgb(219,88,35)" fg:x="12723" fg:w="33"/><text x="73.4590%" y="175.50"></text></g><g><title>sat`core::slice::sort::provide_sorted_batch (2 samples, 0.01%)</title><rect x="73.3874%" y="149" width="0.0115%" height="15" fill="rgb(220,193,23)" fg:x="12754" fg:w="2"/><text x="73.6374%" y="159.50"></text></g><g><title>sat`core::slice::sort::insertion_sort_shift_left (2 samples, 0.01%)</title><rect x="73.3874%" y="133" width="0.0115%" height="15" fill="rgb(230,90,52)" fg:x="12754" fg:w="2"/><text x="73.6374%" y="143.50"></text></g><g><title>sat`core::slice::sort::insert_tail (2 samples, 0.01%)</title><rect x="73.3874%" y="117" width="0.0115%" height="15" fill="rgb(252,106,19)" fg:x="12754" fg:w="2"/><text x="73.6374%" y="127.50"></text></g><g><title>sat`core::ops::function::FnMut::call_mut (2 samples, 0.01%)</title><rect x="73.3874%" y="101" width="0.0115%" height="15" fill="rgb(206,74,20)" fg:x="12754" fg:w="2"/><text x="73.6374%" y="111.50"></text></g><g><title>sat`core::cmp::PartialOrd::lt (2 samples, 0.01%)</title><rect x="73.3874%" y="85" width="0.0115%" height="15" fill="rgb(230,138,44)" fg:x="12754" fg:w="2"/><text x="73.6374%" y="95.50"></text></g><g><title>sat`&lt;sat::solver::Literal as core::cmp::PartialEq&gt;::eq (3 samples, 0.02%)</title><rect x="73.4047%" y="165" width="0.0173%" height="15" fill="rgb(235,182,43)" fg:x="12757" fg:w="3"/><text x="73.6547%" y="175.50"></text></g><g><title>sat`sat::solver::Solver::conflict_analysis (1,997 samples, 11.49%)</title><rect x="61.9426%" y="245" width="11.4909%" height="15" fill="rgb(242,16,51)" fg:x="10765" fg:w="1997"/><text x="62.1926%" y="255.50">sat`sat::solver::..</text></g><g><title>sat`sat::solver::Solver::conflict_analysis_first_uip (1,952 samples, 11.23%)</title><rect x="62.2015%" y="229" width="11.2319%" height="15" fill="rgb(248,9,4)" fg:x="10810" fg:w="1952"/><text x="62.4515%" y="239.50">sat`sat::solver::..</text></g><g><title>sat`sat::solver::Clause::new (39 samples, 0.22%)</title><rect x="73.2090%" y="213" width="0.2244%" height="15" fill="rgb(210,31,22)" fg:x="12723" fg:w="39"/><text x="73.4590%" y="223.50"></text></g><g><title>sat`alloc::vec::Vec&lt;T,A&gt;::dedup (6 samples, 0.03%)</title><rect x="73.3989%" y="197" width="0.0345%" height="15" fill="rgb(239,54,39)" fg:x="12756" fg:w="6"/><text x="73.6489%" y="207.50"></text></g><g><title>sat`alloc::vec::Vec&lt;T,A&gt;::dedup_by (6 samples, 0.03%)</title><rect x="73.3989%" y="181" width="0.0345%" height="15" fill="rgb(230,99,41)" fg:x="12756" fg:w="6"/><text x="73.6489%" y="191.50"></text></g><g><title>sat`alloc::vec::Vec&lt;T,A&gt;::dedup::_{{closure}} (2 samples, 0.01%)</title><rect x="73.4219%" y="165" width="0.0115%" height="15" fill="rgb(253,106,12)" fg:x="12760" fg:w="2"/><text x="73.6719%" y="175.50"></text></g><g><title>sat`&lt;sat::slot_map::SlotMapEnumerator&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="73.4335%" y="101" width="0.0173%" height="15" fill="rgb(213,46,41)" fg:x="12762" fg:w="3"/><text x="73.6835%" y="111.50"></text></g><g><title>sat`&lt;sat::slot_map::SlotMapIterator&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="73.4392%" y="85" width="0.0115%" height="15" fill="rgb(215,133,35)" fg:x="12763" fg:w="2"/><text x="73.6892%" y="95.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.01%)</title><rect x="73.4392%" y="69" width="0.0115%" height="15" fill="rgb(213,28,5)" fg:x="12763" fg:w="2"/><text x="73.6892%" y="79.50"></text></g><g><title>sat`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.01%)</title><rect x="73.4392%" y="53" width="0.0115%" height="15" fill="rgb(215,77,49)" fg:x="12763" fg:w="2"/><text x="73.6892%" y="63.50"></text></g><g><title>sat`sat::solver::Solver::discover_unit_clauses (5 samples, 0.03%)</title><rect x="73.4335%" y="245" width="0.0288%" height="15" fill="rgb(248,100,22)" fg:x="12762" fg:w="5"/><text x="73.6835%" y="255.50"></text></g><g><title>sat`core::iter::traits::iterator::Iterator::collect (5 samples, 0.03%)</title><rect x="73.4335%" y="229" width="0.0288%" height="15" fill="rgb(208,67,9)" fg:x="12762" fg:w="5"/><text x="73.6835%" y="239.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (5 samples, 0.03%)</title><rect x="73.4335%" y="213" width="0.0288%" height="15" fill="rgb(219,133,21)" fg:x="12762" fg:w="5"/><text x="73.6835%" y="223.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.03%)</title><rect x="73.4335%" y="197" width="0.0288%" height="15" fill="rgb(246,46,29)" fg:x="12762" fg:w="5"/><text x="73.6835%" y="207.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (5 samples, 0.03%)</title><rect x="73.4335%" y="181" width="0.0288%" height="15" fill="rgb(246,185,52)" fg:x="12762" fg:w="5"/><text x="73.6835%" y="191.50"></text></g><g><title>sat`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.03%)</title><rect x="73.4335%" y="165" width="0.0288%" height="15" fill="rgb(252,136,11)" fg:x="12762" fg:w="5"/><text x="73.6835%" y="175.50"></text></g><g><title>sat`&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.03%)</title><rect x="73.4335%" y="149" width="0.0288%" height="15" fill="rgb(219,138,53)" fg:x="12762" fg:w="5"/><text x="73.6835%" y="159.50"></text></g><g><title>sat`core::iter::traits::iterator::Iterator::find (5 samples, 0.03%)</title><rect x="73.4335%" y="133" width="0.0288%" height="15" fill="rgb(211,51,23)" fg:x="12762" fg:w="5"/><text x="73.6835%" y="143.50"></text></g><g><title>sat`core::iter::traits::iterator::Iterator::try_fold (5 samples, 0.03%)</title><rect x="73.4335%" y="117" width="0.0288%" height="15" fill="rgb(247,221,28)" fg:x="12762" fg:w="5"/><text x="73.6835%" y="127.50"></text></g><g><title>sat`core::iter::traits::iterator::Iterator::find::check::_{{closure}} (2 samples, 0.01%)</title><rect x="73.4507%" y="101" width="0.0115%" height="15" fill="rgb(251,222,45)" fg:x="12765" fg:w="2"/><text x="73.7007%" y="111.50"></text></g><g><title>sat`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2 samples, 0.01%)</title><rect x="73.4507%" y="85" width="0.0115%" height="15" fill="rgb(217,162,53)" fg:x="12765" fg:w="2"/><text x="73.7007%" y="95.50"></text></g><g><title>sat`sat::solver::Solver::discover_unit_clauses::_{{closure}} (2 samples, 0.01%)</title><rect x="73.4507%" y="69" width="0.0115%" height="15" fill="rgb(229,93,14)" fg:x="12765" fg:w="2"/><text x="73.7007%" y="79.50"></text></g><g><title>sat`sat::solver::Solver::clause_length (2 samples, 0.01%)</title><rect x="73.4507%" y="53" width="0.0115%" height="15" fill="rgb(209,67,49)" fg:x="12765" fg:w="2"/><text x="73.7007%" y="63.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.01%)</title><rect x="73.5025%" y="229" width="0.0115%" height="15" fill="rgb(213,87,29)" fg:x="12774" fg:w="2"/><text x="73.7525%" y="239.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (16 samples, 0.09%)</title><rect x="73.5140%" y="229" width="0.0921%" height="15" fill="rgb(205,151,52)" fg:x="12776" fg:w="16"/><text x="73.7640%" y="239.50"></text></g><g><title>sat`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (3 samples, 0.02%)</title><rect x="73.5888%" y="213" width="0.0173%" height="15" fill="rgb(253,215,39)" fg:x="12789" fg:w="3"/><text x="73.8388%" y="223.50"></text></g><g><title>sat`&lt;sat::solver::ClauseIterator as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.04%)</title><rect x="73.6061%" y="229" width="0.0403%" height="15" fill="rgb(221,220,41)" fg:x="12792" fg:w="7"/><text x="73.8561%" y="239.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.02%)</title><rect x="73.6291%" y="213" width="0.0173%" height="15" fill="rgb(218,133,21)" fg:x="12796" fg:w="3"/><text x="73.8791%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="73.6521%" y="181" width="0.0115%" height="15" fill="rgb(221,193,43)" fg:x="12800" fg:w="2"/><text x="73.9021%" y="191.50"></text></g><g><title>sat`core::cmp::impls::_&lt;impl core::cmp::PartialOrd for usize&gt;::partial_cmp (7 samples, 0.04%)</title><rect x="73.7096%" y="149" width="0.0403%" height="15" fill="rgb(240,128,52)" fg:x="12810" fg:w="7"/><text x="73.9596%" y="159.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (8 samples, 0.05%)</title><rect x="73.7614%" y="133" width="0.0460%" height="15" fill="rgb(253,114,12)" fg:x="12819" fg:w="8"/><text x="74.0114%" y="143.50"></text></g><g><title>sat`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.02%)</title><rect x="73.7902%" y="117" width="0.0173%" height="15" fill="rgb(215,223,47)" fg:x="12824" fg:w="3"/><text x="74.0402%" y="127.50"></text></g><g><title>sat`core::option::Option&lt;T&gt;::map_or (9 samples, 0.05%)</title><rect x="73.8075%" y="133" width="0.0518%" height="15" fill="rgb(248,225,23)" fg:x="12827" fg:w="9"/><text x="74.0575%" y="143.50"></text></g><g><title>sat`core::slice::sort::find_streak (34 samples, 0.20%)</title><rect x="73.6694%" y="181" width="0.1956%" height="15" fill="rgb(250,108,0)" fg:x="12803" fg:w="34"/><text x="73.9194%" y="191.50"></text></g><g><title>sat`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (29 samples, 0.17%)</title><rect x="73.6981%" y="165" width="0.1669%" height="15" fill="rgb(228,208,7)" fg:x="12808" fg:w="29"/><text x="73.9481%" y="175.50"></text></g><g><title>sat`sat::solver::Solver::learn_clause::_{{closure}} (20 samples, 0.12%)</title><rect x="73.7499%" y="149" width="0.1151%" height="15" fill="rgb(244,45,10)" fg:x="12817" fg:w="20"/><text x="73.9999%" y="159.50"></text></g><g><title>sat`core::cmp::impls::_&lt;impl core::cmp::PartialOrd for usize&gt;::partial_cmp (13 samples, 0.07%)</title><rect x="73.9571%" y="149" width="0.0748%" height="15" fill="rgb(207,125,25)" fg:x="12853" fg:w="13"/><text x="74.2071%" y="159.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (34 samples, 0.20%)</title><rect x="74.0779%" y="133" width="0.1956%" height="15" fill="rgb(210,195,18)" fg:x="12874" fg:w="34"/><text x="74.3279%" y="143.50"></text></g><g><title>sat`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (10 samples, 0.06%)</title><rect x="74.2160%" y="117" width="0.0575%" height="15" fill="rgb(249,80,12)" fg:x="12898" fg:w="10"/><text x="74.4660%" y="127.50"></text></g><g><title>sat`core::option::Option&lt;T&gt;::map_or (17 samples, 0.10%)</title><rect x="74.2735%" y="133" width="0.0978%" height="15" fill="rgb(221,65,9)" fg:x="12908" fg:w="17"/><text x="74.5235%" y="143.50"></text></g><g><title>sat`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (78 samples, 0.45%)</title><rect x="73.9341%" y="165" width="0.4488%" height="15" fill="rgb(235,49,36)" fg:x="12849" fg:w="78"/><text x="74.1841%" y="175.50"></text></g><g><title>sat`sat::solver::Solver::learn_clause::_{{closure}} (61 samples, 0.35%)</title><rect x="74.0319%" y="149" width="0.3510%" height="15" fill="rgb(225,32,20)" fg:x="12866" fg:w="61"/><text x="74.2819%" y="159.50"></text></g><g><title>sat`core::option::Option&lt;T&gt;::unwrap (2 samples, 0.01%)</title><rect x="74.3714%" y="133" width="0.0115%" height="15" fill="rgb(215,141,46)" fg:x="12925" fg:w="2"/><text x="74.6214%" y="143.50"></text></g><g><title>sat`core::slice::sort::merge (92 samples, 0.53%)</title><rect x="73.8650%" y="181" width="0.5294%" height="15" fill="rgb(250,160,47)" fg:x="12837" fg:w="92"/><text x="74.1150%" y="191.50"></text></g><g><title>sat`core::ptr::drop_in_place&lt;core::slice::sort::merge::MergeHole&lt;sat::solver::Literal&gt;&gt; (2 samples, 0.01%)</title><rect x="74.3829%" y="165" width="0.0115%" height="15" fill="rgb(216,222,40)" fg:x="12927" fg:w="2"/><text x="74.6329%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="74.3829%" y="149" width="0.0115%" height="15" fill="rgb(234,217,39)" fg:x="12927" fg:w="2"/><text x="74.6329%" y="159.50"></text></g><g><title>sat`core::slice::sort::merge_sort::collapse (2 samples, 0.01%)</title><rect x="74.4059%" y="181" width="0.0115%" height="15" fill="rgb(207,178,40)" fg:x="12931" fg:w="2"/><text x="74.6559%" y="191.50"></text></g><g><title>sat`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.01%)</title><rect x="74.4232%" y="149" width="0.0115%" height="15" fill="rgb(221,136,13)" fg:x="12934" fg:w="2"/><text x="74.6732%" y="159.50"></text></g><g><title>sat`&lt;core::ops::range::RangeInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (7 samples, 0.04%)</title><rect x="74.4347%" y="149" width="0.0403%" height="15" fill="rgb(249,199,10)" fg:x="12936" fg:w="7"/><text x="74.6847%" y="159.50"></text></g><g><title>sat`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (4 samples, 0.02%)</title><rect x="74.4519%" y="133" width="0.0230%" height="15" fill="rgb(249,222,13)" fg:x="12939" fg:w="4"/><text x="74.7019%" y="143.50"></text></g><g><title>sat`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (3 samples, 0.02%)</title><rect x="74.4922%" y="133" width="0.0173%" height="15" fill="rgb(244,185,38)" fg:x="12946" fg:w="3"/><text x="74.7422%" y="143.50"></text></g><g><title>sat`core::cmp::impls::_&lt;impl core::cmp::PartialOrd for usize&gt;::partial_cmp (2 samples, 0.01%)</title><rect x="74.5095%" y="117" width="0.0115%" height="15" fill="rgb(236,202,9)" fg:x="12949" fg:w="2"/><text x="74.7595%" y="127.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.02%)</title><rect x="74.5267%" y="101" width="0.0173%" height="15" fill="rgb(250,229,37)" fg:x="12952" fg:w="3"/><text x="74.7767%" y="111.50"></text></g><g><title>sat`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.01%)</title><rect x="74.5325%" y="85" width="0.0115%" height="15" fill="rgb(206,174,23)" fg:x="12953" fg:w="2"/><text x="74.7825%" y="95.50"></text></g><g><title>sat`core::option::Option&lt;T&gt;::map_or (2 samples, 0.01%)</title><rect x="74.5440%" y="101" width="0.0115%" height="15" fill="rgb(211,33,43)" fg:x="12955" fg:w="2"/><text x="74.7940%" y="111.50"></text></g><g><title>sat`alloc::slice::_&lt;impl [T]&gt;::sort_by (159 samples, 0.91%)</title><rect x="73.6464%" y="229" width="0.9149%" height="15" fill="rgb(245,58,50)" fg:x="12799" fg:w="159"/><text x="73.8964%" y="239.50"></text></g><g><title>sat`alloc::slice::stable_sort (159 samples, 0.91%)</title><rect x="73.6464%" y="213" width="0.9149%" height="15" fill="rgb(244,68,36)" fg:x="12799" fg:w="159"/><text x="73.8964%" y="223.50"></text></g><g><title>sat`core::slice::sort::merge_sort (159 samples, 0.91%)</title><rect x="73.6464%" y="197" width="0.9149%" height="15" fill="rgb(232,229,15)" fg:x="12799" fg:w="159"/><text x="73.8964%" y="207.50"></text></g><g><title>sat`core::slice::sort::provide_sorted_batch (25 samples, 0.14%)</title><rect x="74.4174%" y="181" width="0.1439%" height="15" fill="rgb(254,30,23)" fg:x="12933" fg:w="25"/><text x="74.6674%" y="191.50"></text></g><g><title>sat`core::slice::sort::insertion_sort_shift_left (24 samples, 0.14%)</title><rect x="74.4232%" y="165" width="0.1381%" height="15" fill="rgb(235,160,14)" fg:x="12934" fg:w="24"/><text x="74.6732%" y="175.50"></text></g><g><title>sat`core::slice::sort::insert_tail (15 samples, 0.09%)</title><rect x="74.4749%" y="149" width="0.0863%" height="15" fill="rgb(212,155,44)" fg:x="12943" fg:w="15"/><text x="74.7249%" y="159.50"></text></g><g><title>sat`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (9 samples, 0.05%)</title><rect x="74.5095%" y="133" width="0.0518%" height="15" fill="rgb(226,2,50)" fg:x="12949" fg:w="9"/><text x="74.7595%" y="143.50"></text></g><g><title>sat`sat::solver::Solver::learn_clause::_{{closure}} (7 samples, 0.04%)</title><rect x="74.5210%" y="117" width="0.0403%" height="15" fill="rgb(234,177,6)" fg:x="12951" fg:w="7"/><text x="74.7710%" y="127.50"></text></g><g><title>sat`alloc::vec::Vec&lt;T,A&gt;::push (20 samples, 0.12%)</title><rect x="74.5670%" y="229" width="0.1151%" height="15" fill="rgb(217,24,9)" fg:x="12959" fg:w="20"/><text x="74.8170%" y="239.50"></text></g><g><title>sat`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (10 samples, 0.06%)</title><rect x="74.6245%" y="213" width="0.0575%" height="15" fill="rgb(220,13,46)" fg:x="12969" fg:w="10"/><text x="74.8745%" y="223.50"></text></g><g><title>sat`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (10 samples, 0.06%)</title><rect x="74.6245%" y="197" width="0.0575%" height="15" fill="rgb(239,221,27)" fg:x="12969" fg:w="10"/><text x="74.8745%" y="207.50"></text></g><g><title>sat`alloc::raw_vec::finish_grow (10 samples, 0.06%)</title><rect x="74.6245%" y="181" width="0.0575%" height="15" fill="rgb(222,198,25)" fg:x="12969" fg:w="10"/><text x="74.8745%" y="191.50"></text></g><g><title>sat`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (10 samples, 0.06%)</title><rect x="74.6245%" y="165" width="0.0575%" height="15" fill="rgb(211,99,13)" fg:x="12969" fg:w="10"/><text x="74.8745%" y="175.50"></text></g><g><title>sat`alloc::alloc::Global::grow_impl (10 samples, 0.06%)</title><rect x="74.6245%" y="149" width="0.0575%" height="15" fill="rgb(232,111,31)" fg:x="12969" fg:w="10"/><text x="74.8745%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (10 samples, 0.06%)</title><rect x="74.6245%" y="133" width="0.0575%" height="15" fill="rgb(245,82,37)" fg:x="12969" fg:w="10"/><text x="74.8745%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (10 samples, 0.06%)</title><rect x="74.6245%" y="117" width="0.0575%" height="15" fill="rgb(227,149,46)" fg:x="12969" fg:w="10"/><text x="74.8745%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.05%)</title><rect x="74.6361%" y="101" width="0.0460%" height="15" fill="rgb(218,36,50)" fg:x="12971" fg:w="8"/><text x="74.8861%" y="111.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.02%)</title><rect x="74.6993%" y="213" width="0.0173%" height="15" fill="rgb(226,80,48)" fg:x="12982" fg:w="3"/><text x="74.9493%" y="223.50"></text></g><g><title>sat`&lt;sat::solver::ClauseIterator as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.03%)</title><rect x="74.7166%" y="213" width="0.0345%" height="15" fill="rgb(238,224,15)" fg:x="12985" fg:w="6"/><text x="74.9666%" y="223.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5 samples, 0.03%)</title><rect x="74.7224%" y="197" width="0.0288%" height="15" fill="rgb(241,136,10)" fg:x="12986" fg:w="5"/><text x="74.9724%" y="207.50"></text></g><g><title>sat`sat::solver::Solver::learn_clause (226 samples, 1.30%)</title><rect x="73.4622%" y="245" width="1.3004%" height="15" fill="rgb(208,32,45)" fg:x="12767" fg:w="226"/><text x="73.7122%" y="255.50"></text></g><g><title>sat`sat::solver::Solver::clause_length (14 samples, 0.08%)</title><rect x="74.6821%" y="229" width="0.0806%" height="15" fill="rgb(207,135,9)" fg:x="12979" fg:w="14"/><text x="74.9321%" y="239.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (246 samples, 1.42%)</title><rect x="75.5452%" y="229" width="1.4155%" height="15" fill="rgb(206,86,44)" fg:x="13129" fg:w="246"/><text x="75.7952%" y="239.50"></text></g><g><title>sat`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (86 samples, 0.49%)</title><rect x="76.4658%" y="213" width="0.4949%" height="15" fill="rgb(245,177,15)" fg:x="13289" fg:w="86"/><text x="76.7158%" y="223.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3 samples, 0.02%)</title><rect x="76.9607%" y="229" width="0.0173%" height="15" fill="rgb(206,64,50)" fg:x="13375" fg:w="3"/><text x="77.2107%" y="239.50"></text></g><g><title>sat`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (147 samples, 0.85%)</title><rect x="76.9780%" y="229" width="0.8458%" height="15" fill="rgb(234,36,40)" fg:x="13378" fg:w="147"/><text x="77.2280%" y="239.50"></text></g><g><title>sat`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (200 samples, 1.15%)</title><rect x="77.8238%" y="229" width="1.1508%" height="15" fill="rgb(213,64,8)" fg:x="13525" fg:w="200"/><text x="78.0738%" y="239.50"></text></g><g><title>sat`&lt;sat::solver::ClauseIterator as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.07%)</title><rect x="78.9746%" y="229" width="0.0748%" height="15" fill="rgb(210,75,36)" fg:x="13725" fg:w="13"/><text x="79.2246%" y="239.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.01%)</title><rect x="79.0379%" y="213" width="0.0115%" height="15" fill="rgb(229,88,21)" fg:x="13736" fg:w="2"/><text x="79.2879%" y="223.50"></text></g><g><title>sat`&lt;sat::solver::Value as core::cmp::PartialEq&gt;::eq (43 samples, 0.25%)</title><rect x="79.0494%" y="229" width="0.2474%" height="15" fill="rgb(252,204,47)" fg:x="13738" fg:w="43"/><text x="79.2994%" y="239.50"></text></g><g><title>sat`core::cmp::PartialEq::ne (18 samples, 0.10%)</title><rect x="79.2969%" y="229" width="0.1036%" height="15" fill="rgb(208,77,27)" fg:x="13781" fg:w="18"/><text x="79.5469%" y="239.50"></text></g><g><title>sat`core::option::Option&lt;T&gt;::map_or (2 samples, 0.01%)</title><rect x="79.4062%" y="229" width="0.0115%" height="15" fill="rgb(221,76,26)" fg:x="13800" fg:w="2"/><text x="79.6562%" y="239.50"></text></g><g><title>sat`sat::fixed_size_stack::FixedSizeStack&lt;T&gt;::pop (3 samples, 0.02%)</title><rect x="79.4292%" y="229" width="0.0173%" height="15" fill="rgb(225,139,18)" fg:x="13804" fg:w="3"/><text x="79.6792%" y="239.50"></text></g><g><title>sat`sat::slot_map::SlotMap&lt;T&gt;::get (10 samples, 0.06%)</title><rect x="79.4465%" y="229" width="0.0575%" height="15" fill="rgb(230,137,11)" fg:x="13807" fg:w="10"/><text x="79.6965%" y="239.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (10 samples, 0.06%)</title><rect x="79.4465%" y="213" width="0.0575%" height="15" fill="rgb(212,28,1)" fg:x="13807" fg:w="10"/><text x="79.6965%" y="223.50"></text></g><g><title>sat`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.01%)</title><rect x="79.4925%" y="197" width="0.0115%" height="15" fill="rgb(248,164,17)" fg:x="13815" fg:w="2"/><text x="79.7425%" y="207.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (20 samples, 0.12%)</title><rect x="79.5788%" y="213" width="0.1151%" height="15" fill="rgb(222,171,42)" fg:x="13830" fg:w="20"/><text x="79.8288%" y="223.50"></text></g><g><title>sat`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.03%)</title><rect x="79.6594%" y="197" width="0.0345%" height="15" fill="rgb(243,84,45)" fg:x="13844" fg:w="6"/><text x="79.9094%" y="207.50"></text></g><g><title>sat`&lt;sat::solver::ClauseIterator as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.14%)</title><rect x="79.6939%" y="213" width="0.1439%" height="15" fill="rgb(252,49,23)" fg:x="13850" fg:w="25"/><text x="79.9439%" y="223.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (13 samples, 0.07%)</title><rect x="79.7629%" y="197" width="0.0748%" height="15" fill="rgb(215,19,7)" fg:x="13862" fg:w="13"/><text x="80.0129%" y="207.50"></text></g><g><title>sat`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.02%)</title><rect x="79.8205%" y="181" width="0.0173%" height="15" fill="rgb(238,81,41)" fg:x="13872" fg:w="3"/><text x="80.0705%" y="191.50"></text></g><g><title>sat`&lt;sat::solver::Value as core::ops::bit::Not&gt;::not (4 samples, 0.02%)</title><rect x="79.8377%" y="213" width="0.0230%" height="15" fill="rgb(210,199,37)" fg:x="13875" fg:w="4"/><text x="80.0877%" y="223.50"></text></g><g><title>sat`sat::solver::Solver::clause_length (63 samples, 0.36%)</title><rect x="79.5155%" y="229" width="0.3625%" height="15" fill="rgb(244,192,49)" fg:x="13819" fg:w="63"/><text x="79.7655%" y="239.50"></text></g><g><title>sat`sat::solver::Literal::value (2 samples, 0.01%)</title><rect x="79.8665%" y="213" width="0.0115%" height="15" fill="rgb(226,211,11)" fg:x="13880" fg:w="2"/><text x="80.1165%" y="223.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (18 samples, 0.10%)</title><rect x="79.9298%" y="213" width="0.1036%" height="15" fill="rgb(236,162,54)" fg:x="13891" fg:w="18"/><text x="80.1798%" y="223.50"></text></g><g><title>sat`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.03%)</title><rect x="80.0046%" y="197" width="0.0288%" height="15" fill="rgb(220,229,9)" fg:x="13904" fg:w="5"/><text x="80.2546%" y="207.50"></text></g><g><title>sat`&lt;sat::solver::ClauseIterator as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.17%)</title><rect x="80.0334%" y="213" width="0.1669%" height="15" fill="rgb(250,87,22)" fg:x="13909" fg:w="29"/><text x="80.2834%" y="223.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (16 samples, 0.09%)</title><rect x="80.1082%" y="197" width="0.0921%" height="15" fill="rgb(239,43,17)" fg:x="13922" fg:w="16"/><text x="80.3582%" y="207.50"></text></g><g><title>sat`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 0.04%)</title><rect x="80.1600%" y="181" width="0.0403%" height="15" fill="rgb(231,177,25)" fg:x="13931" fg:w="7"/><text x="80.4100%" y="191.50"></text></g><g><title>sat`sat::solver::Solver::eval_clause (62 samples, 0.36%)</title><rect x="79.8780%" y="229" width="0.3568%" height="15" fill="rgb(219,179,1)" fg:x="13882" fg:w="62"/><text x="80.1280%" y="239.50"></text></g><g><title>sat`sat::solver::Literal::value (5 samples, 0.03%)</title><rect x="80.2060%" y="213" width="0.0288%" height="15" fill="rgb(238,219,53)" fg:x="13939" fg:w="5"/><text x="80.4560%" y="223.50"></text></g><g><title>sat`sat::solver::Solver::next_unassigned (961 samples, 5.53%)</title><rect x="74.7626%" y="245" width="5.5297%" height="15" fill="rgb(232,167,36)" fg:x="12993" fg:w="961"/><text x="75.0126%" y="255.50">sat`sat..</text></g><g><title>sat`sat::solver::Value::or (10 samples, 0.06%)</title><rect x="80.2348%" y="229" width="0.0575%" height="15" fill="rgb(244,19,51)" fg:x="13944" fg:w="10"/><text x="80.4848%" y="239.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (119 samples, 0.68%)</title><rect x="81.8804%" y="229" width="0.6847%" height="15" fill="rgb(224,6,22)" fg:x="14230" fg:w="119"/><text x="82.1304%" y="239.50"></text></g><g><title>sat`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (29 samples, 0.17%)</title><rect x="82.3983%" y="213" width="0.1669%" height="15" fill="rgb(224,145,5)" fg:x="14320" fg:w="29"/><text x="82.6483%" y="223.50"></text></g><g><title>sat`&lt;sat::solver::ClauseIterator as core::iter::traits::iterator::Iterator&gt;::next (152 samples, 0.87%)</title><rect x="82.5652%" y="229" width="0.8746%" height="15" fill="rgb(234,130,49)" fg:x="14349" fg:w="152"/><text x="82.8152%" y="239.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (65 samples, 0.37%)</title><rect x="83.0658%" y="213" width="0.3740%" height="15" fill="rgb(254,6,2)" fg:x="14436" fg:w="65"/><text x="83.3158%" y="223.50"></text></g><g><title>sat`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (19 samples, 0.11%)</title><rect x="83.3305%" y="197" width="0.1093%" height="15" fill="rgb(208,96,46)" fg:x="14482" fg:w="19"/><text x="83.5805%" y="207.50"></text></g><g><title>sat`&lt;sat::solver::Literal as core::cmp::PartialEq&gt;::eq (3 samples, 0.02%)</title><rect x="83.4398%" y="229" width="0.0173%" height="15" fill="rgb(239,3,39)" fg:x="14501" fg:w="3"/><text x="83.6898%" y="239.50"></text></g><g><title>sat`alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.02%)</title><rect x="83.4570%" y="229" width="0.0173%" height="15" fill="rgb(233,210,1)" fg:x="14504" fg:w="3"/><text x="83.7070%" y="239.50"></text></g><g><title>sat`core::option::Option&lt;T&gt;::unwrap (88 samples, 0.51%)</title><rect x="83.4801%" y="229" width="0.5064%" height="15" fill="rgb(244,137,37)" fg:x="14508" fg:w="88"/><text x="83.7301%" y="239.50"></text></g><g><title>sat`core::slice::iter::Iter&lt;T&gt;::new (4 samples, 0.02%)</title><rect x="83.9864%" y="229" width="0.0230%" height="15" fill="rgb(240,136,2)" fg:x="14596" fg:w="4"/><text x="84.2364%" y="239.50"></text></g><g><title>sat`sat::fixed_size_stack::FixedSizeStack&lt;T&gt;::push (5 samples, 0.03%)</title><rect x="84.0152%" y="229" width="0.0288%" height="15" fill="rgb(239,18,37)" fg:x="14601" fg:w="5"/><text x="84.2652%" y="239.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3 samples, 0.02%)</title><rect x="84.0267%" y="213" width="0.0173%" height="15" fill="rgb(218,185,22)" fg:x="14603" fg:w="3"/><text x="84.2767%" y="223.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (847 samples, 4.87%)</title><rect x="84.8668%" y="213" width="4.8737%" height="15" fill="rgb(225,218,4)" fg:x="14749" fg:w="847"/><text x="85.1168%" y="223.50">sat`&lt;a..</text></g><g><title>sat`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (187 samples, 1.08%)</title><rect x="88.6645%" y="197" width="1.0760%" height="15" fill="rgb(230,182,32)" fg:x="15409" fg:w="187"/><text x="88.9145%" y="207.50"></text></g><g><title>sat`sat::slot_map::SlotMap&lt;T&gt;::get (991 samples, 5.70%)</title><rect x="84.0440%" y="229" width="5.7023%" height="15" fill="rgb(242,56,43)" fg:x="14606" fg:w="991"/><text x="84.2940%" y="239.50">sat`sat..</text></g><g><title>sat`sat::slot_map::SlotMap&lt;T&gt;::get_mut (3 samples, 0.02%)</title><rect x="89.7462%" y="229" width="0.0173%" height="15" fill="rgb(233,99,24)" fg:x="15597" fg:w="3"/><text x="89.9962%" y="239.50"></text></g><g><title>sat`sat::solver::Clause::iter (9 samples, 0.05%)</title><rect x="89.7635%" y="229" width="0.0518%" height="15" fill="rgb(234,209,42)" fg:x="15600" fg:w="9"/><text x="90.0135%" y="239.50"></text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (517 samples, 2.97%)</title><rect x="91.7084%" y="213" width="2.9749%" height="15" fill="rgb(227,7,12)" fg:x="15938" fg:w="517"/><text x="91.9584%" y="223.50">sat..</text></g><g><title>sat`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (169 samples, 0.97%)</title><rect x="93.7108%" y="197" width="0.9724%" height="15" fill="rgb(245,203,43)" fg:x="16286" fg:w="169"/><text x="93.9608%" y="207.50"></text></g><g><title>sat`&lt;sat::solver::ClauseIterator as core::iter::traits::iterator::Iterator&gt;::next (705 samples, 4.06%)</title><rect x="94.6832%" y="213" width="4.0566%" height="15" fill="rgb(238,205,33)" fg:x="16455" fg:w="705"/><text x="94.9332%" y="223.50">sat`..</text></g><g><title>sat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (472 samples, 2.72%)</title><rect x="96.0239%" y="197" width="2.7159%" height="15" fill="rgb(231,56,7)" fg:x="16688" fg:w="472"/><text x="96.2739%" y="207.50">sa..</text></g><g><title>sat`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (133 samples, 0.77%)</title><rect x="97.9746%" y="181" width="0.7653%" height="15" fill="rgb(244,186,29)" fg:x="17027" fg:w="133"/><text x="98.2246%" y="191.50"></text></g><g><title>sat`&lt;sat::solver::Value as core::ops::bit::Not&gt;::not (49 samples, 0.28%)</title><rect x="98.7399%" y="213" width="0.2819%" height="15" fill="rgb(234,111,31)" fg:x="17160" fg:w="49"/><text x="98.9899%" y="223.50"></text></g><g><title>sat`alloc::vec::Vec&lt;T,A&gt;::len (39 samples, 0.22%)</title><rect x="99.0218%" y="213" width="0.2244%" height="15" fill="rgb(241,149,10)" fg:x="17209" fg:w="39"/><text x="99.2718%" y="223.50"></text></g><g><title>sat`sat::festival_scheduler::Scheduler::solve (17,373 samples, 99.97%)</title><rect x="0.0173%" y="277" width="99.9655%" height="15" fill="rgb(249,206,44)" fg:x="3" fg:w="17373"/><text x="0.2673%" y="287.50">sat`sat::festival_scheduler::Scheduler::solve</text></g><g><title>sat`sat::solver::Solver::solve (17,307 samples, 99.59%)</title><rect x="0.3970%" y="261" width="99.5857%" height="15" fill="rgb(251,153,30)" fg:x="69" fg:w="17307"/><text x="0.6470%" y="271.50">sat`sat::solver::Solver::solve</text></g><g><title>sat`sat::solver::Solver::reassign_watched_literal (3,422 samples, 19.69%)</title><rect x="80.2923%" y="245" width="19.6904%" height="15" fill="rgb(239,152,38)" fg:x="13954" fg:w="3422"/><text x="80.5423%" y="255.50">sat`sat::solver::Solver::reassi..</text></g><g><title>sat`sat::solver::Solver::clause_length_and_value (1,766 samples, 10.16%)</title><rect x="89.8210%" y="229" width="10.1617%" height="15" fill="rgb(249,139,47)" fg:x="15610" fg:w="1766"/><text x="90.0710%" y="239.50">sat`sat::solver..</text></g><g><title>sat`sat::solver::Literal::value (128 samples, 0.74%)</title><rect x="99.2462%" y="213" width="0.7365%" height="15" fill="rgb(244,64,35)" fg:x="17248" fg:w="128"/><text x="99.4962%" y="223.50"></text></g><g><title>dyld`start (17,378 samples, 99.99%)</title><rect x="0.0000%" y="405" width="99.9942%" height="15" fill="rgb(216,46,15)" fg:x="0" fg:w="17378"/><text x="0.2500%" y="415.50">dyld`start</text></g><g><title>sat`main (17,378 samples, 99.99%)</title><rect x="0.0000%" y="389" width="99.9942%" height="15" fill="rgb(250,74,19)" fg:x="0" fg:w="17378"/><text x="0.2500%" y="399.50">sat`main</text></g><g><title>sat`std::rt::lang_start (17,378 samples, 99.99%)</title><rect x="0.0000%" y="373" width="99.9942%" height="15" fill="rgb(249,42,33)" fg:x="0" fg:w="17378"/><text x="0.2500%" y="383.50">sat`std::rt::lang_start</text></g><g><title>sat`std::rt::lang_start_internal (17,378 samples, 99.99%)</title><rect x="0.0000%" y="357" width="99.9942%" height="15" fill="rgb(242,149,17)" fg:x="0" fg:w="17378"/><text x="0.2500%" y="367.50">sat`std::rt::lang_start_internal</text></g><g><title>sat`std::rt::lang_start::_{{closure}} (17,378 samples, 99.99%)</title><rect x="0.0000%" y="341" width="99.9942%" height="15" fill="rgb(244,29,21)" fg:x="0" fg:w="17378"/><text x="0.2500%" y="351.50">sat`std::rt::lang_start::_{{closure}}</text></g><g><title>sat`std::sys_common::backtrace::__rust_begin_short_backtrace (17,378 samples, 99.99%)</title><rect x="0.0000%" y="325" width="99.9942%" height="15" fill="rgb(220,130,37)" fg:x="0" fg:w="17378"/><text x="0.2500%" y="335.50">sat`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>sat`core::ops::function::FnOnce::call_once (17,378 samples, 99.99%)</title><rect x="0.0000%" y="309" width="99.9942%" height="15" fill="rgb(211,67,2)" fg:x="0" fg:w="17378"/><text x="0.2500%" y="319.50">sat`core::ops::function::FnOnce::call_once</text></g><g><title>sat`sat::main (17,378 samples, 99.99%)</title><rect x="0.0000%" y="293" width="99.9942%" height="15" fill="rgb(235,68,52)" fg:x="0" fg:w="17378"/><text x="0.2500%" y="303.50">sat`sat::main</text></g><g><title>all (17,379 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(246,142,3)" fg:x="0" fg:w="17379"/><text x="0.2500%" y="431.50"></text></g></svg></svg>